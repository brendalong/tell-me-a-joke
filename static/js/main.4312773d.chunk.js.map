{"version":3,"sources":["images/happy_smiley_face.png","components/Header.js","components/Punchline.js","components/APICalls.js","components/JokeSetup.js","helpers.js","components/Joke.js","components/App.js","index.js"],"names":["Header","props","className","src","logo","alt","title","Punchline","punchline","handleGetAnother","showPunchline","id","Button","color","onClick","CheckError","response","ok","json","Error","statusText","JokeSetup","str","jokeLoaded","jokeType","setup","handlePunchline","Card","body","inverse","style","backgroundColor","borderColor","CardTitle","charAt","toUpperCase","slice","CardText","Joke","useState","setJokeLoaded","theJoke","setTheJoke","setShowPunchline","error","setError","loadAnother","fetch","then","catch","useEffect","message","category","delivery","App","ReactDOM","render","document","getElementById"],"mappings":"0LAAe,G,YAAA,IAA0B,+C,OCoB1BA,MAbf,SAAgBC,GAGd,OACE,yBAAQC,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SAEzC,oBAAIH,UAAU,YAAd,SAA2BD,EAAMK,Y,eCTxB,SAASC,EAAT,GAAoE,IAA/CC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,iBAC7C,OADgF,EAAjBC,cAG3D,sBAAKC,GAAG,YAAR,UACE,+BAAKH,EAAL,kBACA,cAACI,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAASL,EAAnC,6BAIG,KCdX,SAASM,EAAWC,GAClB,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAMC,MAAMH,EAASI,YAKlB,I,wBCLA,SAASC,EAAT,GAAqF,ICH5DC,EDGJC,EAA+D,EAA/DA,WAAYb,EAAmD,EAAnDA,cAAec,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,gBAOtE,OACE,eAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAO,CAAEC,gBAAiB,UAAWC,YAAa,WAArE,UACGT,EACC,iCACE,eAACU,EAAA,EAAD,8BCdsBX,EDcqBE,ECb1CF,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,ODczC,cAACC,EAAA,EAAD,UAAWZ,OAGb,cAACQ,EAAA,EAAD,6BACDvB,EACC,oCACE,8BAAK,cAACE,EAAA,EAAD,CAAQC,MAAM,OAAOC,QAASY,EAA9B,0BEhBR,SAASY,IACd,MAAoCC,oBAAS,GAA7C,mBAAOhB,EAAP,KAAmBiB,EAAnB,KACA,EAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0CH,oBAAS,GAAnD,mBAAO7B,EAAP,KAAsBiC,EAAtB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAUMnB,EAAkB,WACtBiB,GAAiB,IAGblC,EAAmB,WACvB+B,GAAc,GACdE,EAAW,IACXC,GAAiB,GACjBE,EAAS,MACTC,KAIIA,EAAc,WHvBbC,MAAM,0DACVC,KAAKjC,GACLiC,MAAK,SAAAhC,GAAQ,OAAIA,KGuBfgC,MAAK,SAAAhC,GACJ0B,EAAW1B,GACXwB,GAAc,MAEfS,OAAM,SAACL,GAENC,EAASD,OAsCf,OALAM,qBAAU,WACRJ,MACC,IAID,mCAlCIF,EAEA,gCACE,0CAAaA,EAAMO,WACnB,cAACvC,EAAA,EAAD,CAAQC,MAAM,OAAOC,QAASL,EAA9B,0BAGMc,EAIR,sBAAKrB,UAAU,gBAAf,UACE,cAACmB,EAAD,CAAWE,WAAYA,EACrBE,MAAOgB,EAAQhB,MACfD,SAAUiB,EAAQW,SAClB1C,cAAeA,EACfgB,gBAAiBA,IAClBhB,GACC,cAACH,EAAD,CACEG,cAAeA,EACfF,UAAWiC,EAAQY,SACnB5C,iBAAkBA,OAbnB,+CCjDE,SAAS6C,IACtB,OACE,sBAAKpD,UAAU,MAAf,UACE,cAAC,EAAD,CAAQI,MAAM,uBACd,cAACgC,EAAD,O,MCHNiB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4312773d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/happy_smiley_face.7d347bbc.png\";","import React from 'react';\n// it is recommended to import static images. See BL React Notes.\n// the following works\nimport logo from '../images/happy_smiley_face.png';\n// <img src=\"./images/happy_smiley_face.png\" className=\"App-logo\" alt=\"Joke Logo\"/>\n\n\nfunction Header(props) {\n\n  // const logoImage = require(`./../images/happy_smiley_face.png`);\n  return (\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      {/*<img src={logoImage} alt=\"Joke Logo\" className=\"App-logo\" />*/}\n      <h1 className=\"App-title\">{props.title}</h1>\n    </header>\n  )\n\n}\n\nexport default Header;","import React from 'react';\nimport { Button } from 'reactstrap';\n\n//functional component\n// JS function that accepts props and returns something\nexport default function Punchline({ punchline, handleGetAnother, showPunchline }) {\n  if (showPunchline) {\n    return (\n      <div id=\"punchline\">\n        <h5>{punchline} HA! HA! HA!</h5>\n        <Button color=\"secondary\" onClick={handleGetAnother}>Show Another</Button>\n      </div>\n    )\n  } else {\n    return null;\n  }\n}","function CheckError(response) {\n  if (response.ok) {\n    return response.json();\n  } else {\n    throw Error(response.statusText);\n  }\n}\n\n\nexport const getJoke = () => {\n  return fetch(\"https://v2.jokeapi.dev/joke/Any?type=twopart&safe-mode\")\n    .then(CheckError)\n    .then(response => response)\n\n}","import React from 'react';\nimport { Card, Button, CardTitle, CardText } from 'reactstrap';\nimport { firstLetterCase } from '../helpers';\n\nexport function JokeSetup({ jokeLoaded, showPunchline, jokeType, setup, handlePunchline }) {\n\n\n  // once the tell me button has been clicked, be sure to hide it.\n  // don't want to click again\n  // could create components for showMeJoke and showTellMeButton\n\n  return (\n    <Card body inverse style={{ backgroundColor: '#85144b', borderColor: '#85144b' }}>\n      {jokeLoaded ?\n        <span>\n          <CardTitle>Joke Category: {firstLetterCase(jokeType)}</CardTitle>\n          <CardText>{setup}</CardText>\n        </span>\n        :\n        <CardTitle>Getting a Joke</CardTitle>}\n      {showPunchline ?\n        <div> </div>\n        : <div><Button color=\"info\" onClick={handlePunchline}>TELL ME</Button></div>\n      }\n    </Card>\n  )\n}","//conver uppercase function\nexport function firstLetterCase(str) {\n   return (str.charAt(0).toUpperCase() + str.slice(1));\n}","import React, { useState, useEffect } from 'react';\nimport Punchline from './Punchline';\nimport { getJoke } from './APICalls';\nimport { JokeSetup } from './JokeSetup';\nimport { Button } from 'reactstrap'\n\nexport function Joke() {\n  const [jokeLoaded, setJokeLoaded] = useState(false);\n  const [theJoke, setTheJoke] = useState({});\n  const [showPunchline, setShowPunchline] = useState(false);\n  const [error, setError] = useState(null);\n\n  // flow notes\n  // component load and should show \"loading\"\n  // then call to get joke\n  // handle the error also\n  // when joke shows up, display JokeSetup with tellme button\n  // click on tellme, tellme should go away and\n  // punchline should show along with \"get new joke\"\n\n  const handlePunchline = () => {\n    setShowPunchline(true);\n  }\n\n  const handleGetAnother = () => {\n    setJokeLoaded(false);\n    setTheJoke({});\n    setShowPunchline(false);\n    setError(null)\n    loadAnother();\n  }\n\n\n  const loadAnother = () => {\n    getJoke()\n      .then(response => {\n        setTheJoke(response);\n        setJokeLoaded(true);\n      })\n      .catch((error) => {\n        // console.error(\"Error fetching data: \", error);\n        setError(error);\n      })\n  }\n\n  const showView = () => {\n    if (error) {\n      return (\n        <div>\n          <div>Error: {error.message}</div>\n          <Button color=\"info\" onClick={handleGetAnother}>Try Again</Button>\n        </div>\n      );\n    } else if (!jokeLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"box-container\">\n          <JokeSetup jokeLoaded={jokeLoaded}\n            setup={theJoke.setup}\n            jokeType={theJoke.category}\n            showPunchline={showPunchline}\n            handlePunchline={handlePunchline} />\n          {showPunchline &&\n            <Punchline\n              showPunchline={showPunchline}\n              punchline={theJoke.delivery}\n              handleGetAnother={handleGetAnother} />\n          }\n        </div>\n      )\n    }\n  }\n\n  useEffect(() => {\n    loadAnother()\n  }, []);\n\n\n  return (\n    <>\n      {showView()}\n    </>\n  )\n}","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport { Joke } from './Joke';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Header title=\"Tell Brenda A Joke\" />\n      <Joke />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}